(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl =
  "https://gist.githubusercontent.com/vanquisher2000/913aa59cad9f45ad32c76336137eb343/raw/242c9cd510ec21b00b7c24a59388be141c761aad/japanesePopulation.csv";
  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.total = +d.total;
        d.female = +d.female;
        d.male = +d.male;
        return d;
      };
      
      d3.csv(csvUrl, row).then(data => {
        setData(data);
      });
    }, []);
    console.log(data);
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick" },
        React.createElement( 'text', {
          
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em", y: yScale(tickValue) + yScale.bandwidth() / 2 },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat,
    fill,
  }) =>
    data.map((d) => (
      React.createElement( 'rect', {
        className: "mark", key: yValue(d), fill: fill, x: 0, y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() },
        React.createElement( 'animate', {
          attributeName: "width", from: "0", to: xScale(xValue(d)), dur: "0.5s", fill: "freeze", repeatCount: "1", restart: "always" }),
        React.createElement( 'title', null, tooltipFormat(xValue(d)) )
      )
    ));

  const DoubleMarks = ({
    data,
    xScale1,
    xScale2,
    yScale,
    xValue1,
    xValue2,
    yValue,
    tooltipFormat,
    fill1,
    fill2,
    opacity1,
    opacity2
  }) =>
    data.map((d) => (
      React.createElement( React.Fragment, null,
      React.createElement( 'g', { opacity: opacity1 },
      React.createElement( 'rect', {
        className: "doublemark", key: yValue(d), fill: fill1, x: 0, y: yScale(yValue(d)), width: xScale1(xValue1(d)), height: yScale.bandwidth() / 2.3 },
        React.createElement( 'animate', {
          attributeName: "width", from: "0", to: xScale1(xValue1(d)), dur: "0.5s", fill: "freeze", restart: "always" }),
        React.createElement( 'title', null, tooltipFormat(xValue1(d)) )
      )
        ),
      React.createElement( 'g', { opacity: opacity2 },
      React.createElement( 'rect', {
        className: "doublemark", key: yValue(d), fill: fill2, x: 0, y: yScale(yValue(d)) + 4, width: xScale2(xValue2(d)), height: yScale.bandwidth() / 2.3 },
        React.createElement( 'animate', {
          attributeName: "width", from: "0", to: xScale2(xValue2(d)), dur: "0.5s", fill: "freeze", restart: "always" }),
        React.createElement( 'title', null, tooltipFormat(xValue2(d)) )
      )
        )
        )
    ));

  const Dropdown = ({
    options,
    id,
    onSelectedValueChange,
    selectedValue
  }) => (
    React$1__default.createElement( 'select', {
      name: "catagory", id: id, onChange: (event) =>
        onSelectedValueChange(event.target.value) },
      options.map(({ value, label }) => (
        React$1__default.createElement( 'option', { value: value, label: label, selected: value===selectedValue })
      ))
    )
  );

  const ColorLegend = ({
    tickSpacing = 20,
    tickSize = 7,
    onHover,
    hoveredValue
  }) => {
    const categories = ['male', 'female'];
    const colors = ['#8E6C8A', '#E68424'];
    console.log(hoveredValue);
    return categories.map((category, i) => {
      return (
        React.createElement( 'g', {
          className: "colorLegend", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: () => {onHover(category);}, onMouseOut: () =>{ onHover(null);}, opacity: hoveredValue && category !== hoveredValue ? 0.2 : 1 },
          React.createElement( 'circle', { fill: colors[i], r: tickSize }),
          React.createElement( 'text', { x: 10, dy: ".32em" },
            category
          )
        )
      );
    });
  };

  const width = window.innerWidth;
  const height = window.innerHeight- 10;
  const margin = {
    top: 10,
    right: 30,
    bottom: 65,
    left: 150,
  };
  const xAxisLabelOffset = 50;

  const options = [
    { value: 'total', label: '男女:total' },
    { value: 'male', label: '男性:male' },
    { value: 'female', label: '女性:female' },
    { value: 'both', label: '男性＆女性' },
  ];

  //const initialValue = "total";

  const App = () => {
    const data = useData();
    const initialXAttribute = 'both';
    const [xAttribute, setXAttribute] = React$1.useState(
      initialXAttribute
    );
    const xValue = (d) => d[xAttribute];
    const yValue = (d) => d.pref;

    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    console.log(hoveredValue);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    let rectColor = '';
    if (xAttribute === 'total') {
      rectColor = '#137B80';
    } else if (xAttribute === 'male') {
      rectColor = '#8E6C8A';
    } else if (xAttribute === 'female') {
      rectColor = '#E68424';
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const colorLegendLabel = 'Gender';

    const siFormat = d3.format('.2s');
    const xAxisTickFormat = (tickValue) =>
      siFormat(tickValue).replace('G', 'B');

    const yScale = d3.scaleBand()
      .domain(data.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.15);

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(data, xValue)])
      .range([0, innerWidth]);

    if (xAttribute != 'both') {
      return (
        React$1__default.createElement( React$1__default.Fragment, null,
          React$1__default.createElement( 'label', { for: "x-select" }, "Choose a catagory:"),
          React$1__default.createElement( Dropdown, {
            options: options, id: "x-select", selectedValue: xAttribute, onSelectedValueChange: setXAttribute }),
          React$1__default.createElement( 'svg', { width: width, height: height, charset: "UTF-8" },
            React$1__default.createElement( 'g', {
              transform: `translate(${margin.left},${margin.top})` },
              React$1__default.createElement( AxisBottom, {
                xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
              React$1__default.createElement( AxisLeft, { yScale: yScale }),
              React$1__default.createElement( 'text', {
                className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "人口"),

              React$1__default.createElement( Marks, {
                data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat, fill: rectColor })
            )
          )
        )
      );
    } else {
      const xValue1 = (d) => d.male;

      const xValue2 = (d) => d.female;

      const xScale1 = d3.scaleLinear()
        .domain([0, d3.max(data, xValue1)])
        .range([0, innerWidth]);

      const xScale2 = d3.scaleLinear()
        .domain([0, d3.max(data, xValue2)])
        .range([0, innerWidth]);

      return (
        React$1__default.createElement( React$1__default.Fragment, null,
          React$1__default.createElement( 'label', { for: "x-select" }, "Choose a gender:"),
          React$1__default.createElement( Dropdown, {
            options: options, id: "x-select", selectedValue: xAttribute, onSelectedValueChange: setXAttribute }),

          React$1__default.createElement( 'svg', { width: width, height: height, charset: "UTF-8" },
            React$1__default.createElement( 'g', { transform: `translate(${20},${height - 120})` },
              React$1__default.createElement( 'text', {
                className: "colorLegend-label", x: 17, y: -15, textAnchor: "middle" },
                colorLegendLabel
              ),
              React$1__default.createElement( ColorLegend, {
                onHover: setHoveredValue, hoveredValue: hoveredValue })
            ),
            React$1__default.createElement( 'g', {
              transform: `translate(${margin.left},${margin.top})` },
              React$1__default.createElement( AxisBottom, {
                xScale: xScale1, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
              React$1__default.createElement( AxisLeft, { yScale: yScale }),
              React$1__default.createElement( 'text', {
                className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "人口"),
              React$1__default.createElement( DoubleMarks, {
                data: data, xScale1: xScale1, xScale2: xScale2, yScale: yScale, xValue1: xValue1, xValue2: xValue2, yValue: yValue, tooltipFormat: xAxisTickFormat, fill1: "#8E6C8A", fill2: "#E68424", opacity1: hoveredValue === 'female' ? 0.2 : 1, opacity2: hoveredValue === 'male' ? 0.2 : 1 })
            )
          )
        )
      );
    }
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,